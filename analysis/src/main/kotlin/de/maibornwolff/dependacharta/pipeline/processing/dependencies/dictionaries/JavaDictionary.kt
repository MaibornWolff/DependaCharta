package de.maibornwolff.dependacharta.pipeline.processing.dependencies.dictionaries

import de.maibornwolff.dependacharta.pipeline.analysis.model.Path

class JavaDictionary : LanguageDictionary {
    override fun get() = javaDictionary

    companion object {
        private val javaKeywords = mapOf(
            "abstract" to "abstract",
            "assert" to "assert",
            "boolean" to "boolean",
            "break" to "break",
            "byte" to "byte",
            "case" to "case",
            "catch" to "catch",
            "char" to "char",
            "class" to "class",
            "const" to "const",
            "continue" to "continue",
            "default" to "default",
            "do" to "do",
            "double" to "double",
            "else" to "else",
            "enum" to "enum",
            "extends" to "extends",
            "final" to "final",
            "finally" to "finally",
            "float" to "float",
            "for" to "for",
            "goto" to "goto",
            "if" to "if",
            "implements" to "implements",
            "import" to "import",
            "instanceof" to "instanceof",
            "int" to "int",
            "interface" to "interface",
            "long" to "long",
            "native" to "native",
            "new" to "new",
            "null" to "null",
            "package" to "package",
            "private" to "private",
            "protected" to "protected",
            "public" to "public",
            "return" to "return",
            "short" to "short",
            "static" to "static",
            "strictfp" to "strictfp",
            "super" to "super",
            "switch" to "switch",
            "synchronized" to "synchronized",
            "this" to "this",
            "throw" to "throw",
            "throws" to "throws",
            "transient" to "transient",
            "try" to "try",
            "void" to "void",
            "volatile" to "volatile",
            "while" to "while"
        )

        private val javaTypes = mapOf(
            "AbstractMethodError" to "java.lang.AbstractMethodError",
            "Appendable" to "java.lang.Appendable",
            "ArithmeticException" to "java.lang.ArithmeticException",
            "ArrayIndexOutOfBoundsException" to "java.lang.ArrayIndexOutOfBoundsException",
            "ArrayStoreException" to "java.lang.ArrayStoreException",
            "AssertionError" to "java.lang.AssertionError",
            "AutoCloseable" to "java.lang.AutoCloseable",
            "Boolean" to "java.lang.Boolean",
            "BootstrapMethodError" to "java.lang.BootstrapMethodError",
            "Byte" to "java.lang.Byte",
            "Character" to "java.lang.Character",
            "Character.Subset" to "java.lang.Character.Subset",
            "Character.UnicodeBlock" to "java.lang.Character.UnicodeBlock",
            "Character.UnicodeScript" to "java.lang.Character.UnicodeScript",
            "CharSequence" to "java.lang.CharSequence",
            "Class" to "java.lang.Class",
            "ClassCastException" to "java.lang.ClassCastException",
            "ClassCircularityError" to "java.lang.ClassCircularityError",
            "ClassFormatError" to "java.lang.ClassFormatError",
            "ClassLoader" to "java.lang.ClassLoader",
            "ClassNotFoundException" to "java.lang.ClassNotFoundException",
            "ClassValue" to "java.lang.ClassValue",
            "Cloneable" to "java.lang.Cloneable",
            "CloneNotSupportedException" to "java.lang.CloneNotSupportedException",
            "Comparable" to "java.lang.Comparable",
            "Deprecated" to "java.lang.Deprecated",
            "Double" to "java.lang.Double",
            "Enum" to "java.lang.Enum",
            "Enum.EnumDesc" to "java.lang.Enum.EnumDesc",
            "EnumConstantNotPresentException" to "java.lang.EnumConstantNotPresentException",
            "Error" to "java.lang.Error",
            "Exception" to "java.lang.Exception",
            "ExceptionInInitializerError" to "java.lang.ExceptionInInitializerError",
            "Float" to "java.lang.Float",
            "FunctionalInterface" to "java.lang.FunctionalInterface",
            "IdentityException" to "java.lang.IdentityException",
            "IllegalAccessError" to "java.lang.IllegalAccessError",
            "IllegalAccessException" to "java.lang.IllegalAccessException",
            "IllegalArgumentException" to "java.lang.IllegalArgumentException",
            "IllegalCallerException" to "java.lang.IllegalCallerException",
            "IllegalMonitorStateException" to "java.lang.IllegalMonitorStateException",
            "IllegalStateException" to "java.lang.IllegalStateException",
            "IllegalThreadStateException" to "java.lang.IllegalThreadStateException",
            "IncompatibleClassChangeError" to "java.lang.IncompatibleClassChangeError",
            "IndexOutOfBoundsException" to "java.lang.IndexOutOfBoundsException",
            "InheritableThreadLocal" to "java.lang.InheritableThreadLocal",
            "InstantiationError" to "java.lang.InstantiationError",
            "InstantiationException" to "java.lang.InstantiationException",
            "Integer" to "java.lang.Integer",
            "InternalError" to "java.lang.InternalError",
            "InterruptedException" to "java.lang.InterruptedException",
            "Iterable" to "java.lang.Iterable",
            "LayerInstantiationException" to "java.lang.LayerInstantiationException",
            "LinkageError" to "java.lang.LinkageError",
            "Long" to "java.lang.Long",
            "MatchException" to "java.lang.MatchException",
            "Math" to "java.lang.Math",
            "Module" to "java.lang.Module",
            "ModuleLayer" to "java.lang.ModuleLayer",
            "ModuleLayer.Controller" to "java.lang.ModuleLayer.Controller",
            "NegativeArraySizeException" to "java.lang.NegativeArraySizeException",
            "NoClassDefFoundError" to "java.lang.NoClassDefFoundError",
            "NoSuchFieldError" to "java.lang.NoSuchFieldError",
            "NoSuchFieldException" to "java.lang.NoSuchFieldException",
            "NoSuchMethodError" to "java.lang.NoSuchMethodError",
            "NoSuchMethodException" to "java.lang.NoSuchMethodException",
            "NullPointerException" to "java.lang.NullPointerException",
            "Number" to "java.lang.Number",
            "NumberFormatException" to "java.lang.NumberFormatException",
            "Object" to "java.lang.Object",
            "OutOfMemoryError" to "java.lang.OutOfMemoryError",
            "Override" to "java.lang.Override",
            "Package" to "java.lang.Package",
            "Process" to "java.lang.Process",
            "ProcessBuilder" to "java.lang.ProcessBuilder",
            "ProcessBuilder.Redirect" to "java.lang.ProcessBuilder.Redirect",
            "ProcessBuilder.Redirect.Type" to "java.lang.ProcessBuilder.Redirect.Type",
            "ProcessHandle" to "java.lang.ProcessHandle",
            "ProcessHandle.Info" to "java.lang.ProcessHandle.Info",
            "Readable" to "java.lang.Readable",
            "Record" to "java.lang.Record",
            "ReflectiveOperationException" to "java.lang.ReflectiveOperationException",
            "Runnable" to "java.lang.Runnable",
            "Runtime" to "java.lang.Runtime",
            "Runtime.Version" to "java.lang.Runtime.Version",
            "RuntimeException" to "java.lang.RuntimeException",
            "RuntimePermission" to "java.lang.RuntimePermission",
            "SafeVarargs" to "java.lang.SafeVarargs",
            "ScopedValue" to "java.lang.ScopedValue",
            "ScopedValue.Carrier" to "java.lang.ScopedValue.Carrier",
            "SecurityException" to "java.lang.SecurityException",
            "SecurityManager" to "java.lang.SecurityManager",
            "Short" to "java.lang.Short",
            "StackOverflowError" to "java.lang.StackOverflowError",
            "StackTraceElement" to "java.lang.StackTraceElement",
            "StackWalker" to "java.lang.StackWalker",
            "StackWalker.Option" to "java.lang.StackWalker.Option",
            "StackWalker.StackFrame" to "java.lang.StackWalker.StackFrame",
            "StrictMath" to "java.lang.StrictMath",
            "String" to "java.lang.String",
            "StringBuffer" to "java.lang.StringBuffer",
            "StringBuilder" to "java.lang.StringBuilder",
            "StringIndexOutOfBoundsException" to "java.lang.StringIndexOutOfBoundsException",
            "StringTemplate" to "java.lang.StringTemplate",
            "StringTemplate.Processor" to "java.lang.StringTemplate.Processor",
            "StringTemplate.Processor.Linkage" to "java.lang.StringTemplate.Processor.Linkage",
            "SuppressWarnings" to "java.lang.SuppressWarnings",
            "System" to "java.lang.System",
            "System.Logger" to "java.lang.System.Logger",
            "System.Logger.Level" to "java.lang.System.Logger.Level",
            "System.LoggerFinder" to "java.lang.System.LoggerFinder",
            "Thread" to "java.lang.Thread",
            "Thread.Builder" to "java.lang.Thread.Builder",
            "Thread.Builder.OfPlatform" to "java.lang.Thread.Builder.OfPlatform",
            "Thread.Builder.OfVirtual" to "java.lang.Thread.Builder.OfVirtual",
            "Thread.State" to "java.lang.Thread.State",
            "Thread.UncaughtExceptionHandler" to "java.lang.Thread.UncaughtExceptionHandler",
            "ThreadDeath" to "java.lang.ThreadDeath",
            "ThreadGroup" to "java.lang.ThreadGroup",
            "ThreadLocal" to "java.lang.ThreadLocal",
            "Throwable" to "java.lang.Throwable",
            "TypeNotPresentException" to "java.lang.TypeNotPresentException",
            "UnknownError" to "java.lang.UnknownError",
            "UnsatisfiedLinkError" to "java.lang.UnsatisfiedLinkError",
            "UnsupportedClassVersionError" to "java.lang.UnsupportedClassVersionError",
            "UnsupportedOperationException" to "java.lang.UnsupportedOperationException",
            "VerifyError" to "java.lang.VerifyError",
            "VirtualMachineError" to "java.lang.VirtualMachineError",
            "Void" to "java.lang.Void",
            "WrongThreadException" to "java.lang.WrongThreadException"
        )

        private val javaDictionary = (javaTypes + javaKeywords).mapValues { Path(it.value.split(".")) }
    }
}
